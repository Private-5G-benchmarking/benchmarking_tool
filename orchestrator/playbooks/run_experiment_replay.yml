---
# Run with ansible-playbook playbook_name.yml --extra-vars "@file_path_to_vars_file"
- name: Run experiments
  become: true
  hosts: localhost

  tasks:

    - name: Purge Influx measurements with same trial name and the live counter
      become: yes
      shell: "{{ item }}"
      with_items:
        - "sudo influx delete --token OnjSj1CE5Feqwdb1c7w1SPj2EJVV6yWpHHUe93HkfKyVeBo4TN5BrcfVezKJ6sUk50XPVyvPVH1ljSv4JaypzQ== --org 5gbenchmarking --bucket 5gbenchmarking --start '1970-01-01T00:00:00Z' --stop '2100-01-01T00:00:00Z' --predicate '_measurement={{ trial_name }}_analysis'"
        - "sudo influx delete --token OnjSj1CE5Feqwdb1c7w1SPj2EJVV6yWpHHUe93HkfKyVeBo4TN5BrcfVezKJ6sUk50XPVyvPVH1ljSv4JaypzQ== --org 5gbenchmarking --bucket 5gbenchmarking --start '1970-01-01T00:00:00Z' --stop '2100-01-01T00:00:00Z' --predicate '_measurement={{ trial_name }}_analysis_aggregate'"
        - "sudo influx delete --token OnjSj1CE5Feqwdb1c7w1SPj2EJVV6yWpHHUe93HkfKyVeBo4TN5BrcfVezKJ6sUk50XPVyvPVH1ljSv4JaypzQ== --org 5gbenchmarking --bucket 5gbenchmarking --start '1970-01-01T00:00:00Z' --stop '2100-01-01T00:00:00Z' --predicate '_measurement=live_counter'"
 
    - name: Start tshark
      args:
        chdir: /home/shared/benchmarking_tool/packetCapturer
      shell: "tshark -i {{ interface1 }} --time-stamp-type host -i {{ interface2 }} --time-stamp-type host -f '{{ filter }}' -a duration:{{ tshark_duration }} -w /opt/hallo/output_files/pcaps/{{ trial_name }}.pcapng -P | go run /home/shared/benchmarking_tool/liveUpdates/liveupdate.go"
      async: "{{ (tshark_duration+30)|int|abs }}"
      poll: 0
      register: tshark

    - name: Replay traffic
      become: yes
      async: "{{ (tcpreplay_duration+30)|int|abs }}" 
      poll: 0
      shell: "tcpreplay -i {{ interface1 }} {{ replay_file }}"
      register: replay_output

    - name: Wait for tshark to complete
      async_status:
        jid: "{{ tshark.ansible_job_id }}"
      register: tshark_result
      until: tshark_result.finished
      retries: 1000
      delay: 30

    - name: Check for corrupt packets
      shell: pcapfix -n -o /opt/hallo/output_files/pcaps/fixed_{{ trial_name }}.pcapng /opt/hallo/output_files/pcaps/{{ trial_name }}.pcapng # TODO: filename

    - name: Check if fixed pcap exists
      stat:
        path: /opt/hallo/output_files/pcaps/fixed_{{ trial_name }}.pcapng # TODO: filename
      register: stat_result

    - name: Rename corrupt and fixed pcap-files 
      shell: "{{ item }}"
      with_items:
        - "mv /opt/hallo/output_files/pcaps/{{ trial_name }}.pcapng /opt/hallo/output_files/pcaps/CORRUPT_{{ trial_name }}.pcapng"
        - "mv /opt/hallo/output_files/pcaps/fixed_{{ trial_name }}.pcapng /opt/hallo/output_files/pcaps/{{ trial_name }}.pcapng"
      when: stat_result.stat.exists

    - name: Run Go script
      args:
        chdir: /home/shared/benchmarking_tool/packetCapturer
      shell: "sudo go run /home/shared/benchmarking_tool/packetCapturer/main.go -s /opt/hallo/output_files/pcaps/{{ trial_name }}.pcapng -c /home/shared/output_files/csvs/{{ trial_name }}.csv -p {{ sample_prob }} -l4 {{ l4 }}"
      register: go_script_output

    - name: Print Go script output
      debug:
        var: go_script_output.stdout_lines
    
    - name: Copy cpu.pprof for the experiment
      shell: " {{ item }}"
      with_items: 
        - "sudo cp -f /home/shared/benchmarking_tool/packetCapturer/cpu.pprof /home/shared/output_files/performance/packetCapturer/{{ trial_name }}_cpu.pprof"
        - "sudo cp -f /home/shared/benchmarking_tool/packetCapturer/memory.pprof /home/shared/output_files/performance/packetCapturer/{{ trial_name }}_memory.pprof"

    - name: Run analytics
      args:
        chdir: /home/shared/benchmarking_tool/packetAnalyser/src2
      shell: "sudo go run /home/shared/benchmarking_tool/packetAnalyser/src2/main.go -c /home/shared/output_files/csvs/{{ trial_name }}.csv -m {{ trial_name }}_analysis"
      register: analytics_output

    - name: Dump influx for validation
      become: yes
      shell: "{{ item }}"
      with_items:
        - "influx query --token OnjSj1CE5Feqwdb1c7w1SPj2EJVV6yWpHHUe93HkfKyVeBo4TN5BrcfVezKJ6sUk50XPVyvPVH1ljSv4JaypzQ== --org 5gbenchmarking 'from(bucket: \"5gbenchmarking\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"{{ trial_name }}_analysis\") |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")' --raw > /home/shared/validation_backups/influx/base_case/{{ trial_name }}.csv"
        - "influx query --token OnjSj1CE5Feqwdb1c7w1SPj2EJVV6yWpHHUe93HkfKyVeBo4TN5BrcfVezKJ6sUk50XPVyvPVH1ljSv4JaypzQ== --org 5gbenchmarking 'from(bucket: \"5gbenchmarking\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"{{ trial_name }}_analysis_aggregate\") |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")' --raw > /home/shared/validation_backups/influx/base_case/{{ trial_name }}_aggregate.csv"

    - name: Copy pacp for validation
      become: yes
      shell: "cp /opt/hallo/output_files/pcaps/{{ trial_name }}.pcapng /home/shared/validation_backups/pcaps/base_case/{{ trial_name }}.pcapng"

    - name: Copy matched csv for validation
      become: yes
      shell: "cp /home/shared/output_files/csvs/{{ trial_name }}.csv /home/shared/validation_backups/csv/base_case/{{ trial_name }}.csv"
